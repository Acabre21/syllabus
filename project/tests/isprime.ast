TranslationUnit
| block = Block
| | vardecls = TypedIdentList
| | funcdecls = FuncDeclList
| | | FuncDecl
| | | | identifier = isprime
| | | | formals = TypedIdentList
| | | | | TypedIdent
| | | | | | identifier = param
| | | | | | type = INT
| | | | has_return = true
| | | | return_type = BOOL
| | | | block = Block
| | | | | vardecls = TypedIdentList
| | | | | | TypedIdent
| | | | | | | identifier = x
| | | | | | | type = INT
| | | | | funcdecls = FuncDeclList
| | | | | statement = CompoundStatement
| | | | | | compound_statement = StatementList
| | | | | | | IfStatement
| | | | | | | | if_condition = BinaryExpression
| | | | | | | | | binary_op = LT
| | | | | | | | | binary_left = VariableFactor
| | | | | | | | | | variable = param
| | | | | | | | | binary_right = NumberFactor
| | | | | | | | | | number_value = 1
| | | | | | | | if_branch = ReturnStatement
| | | | | | | | | return_expression = BooleanFactor
| | | | | | | | | | boolean_value = false
| | | | | | | | if_elsebranch = IfStatement
| | | | | | | | | if_condition = BinaryExpression
| | | | | | | | | | binary_op = OR
| | | | | | | | | | binary_left = BinaryExpression
| | | | | | | | | | | binary_op = EQ
| | | | | | | | | | | binary_left = VariableFactor
| | | | | | | | | | | | variable = param
| | | | | | | | | | | binary_right = NumberFactor
| | | | | | | | | | | | number_value = 1
| | | | | | | | | | binary_right = BinaryExpression
| | | | | | | | | | | binary_op = EQ
| | | | | | | | | | | binary_left = VariableFactor
| | | | | | | | | | | | variable = param
| | | | | | | | | | | binary_right = NumberFactor
| | | | | | | | | | | | number_value = 2
| | | | | | | | | if_branch = ReturnStatement
| | | | | | | | | | return_expression = BooleanFactor
| | | | | | | | | | | boolean_value = true
| | | | | | | | | if_elsebranch = 
| | | | | | | AssignStatement
| | | | | | | | assign_variable = x
| | | | | | | | assign_expression = NumberFactor
| | | | | | | | | number_value = 2
| | | | | | | WhileStatement
| | | | | | | | while_condition = BinaryExpression
| | | | | | | | | binary_op = LT
| | | | | | | | | binary_left = VariableFactor
| | | | | | | | | | variable = x
| | | | | | | | | binary_right = VariableFactor
| | | | | | | | | | variable = param
| | | | | | | | while_body = CompoundStatement
| | | | | | | | | compound_statement = StatementList
| | | | | | | | | | IfStatement
| | | | | | | | | | | if_condition = BinaryExpression
| | | | | | | | | | | | binary_op = EQ
| | | | | | | | | | | | binary_left = BinaryExpression
| | | | | | | | | | | | | binary_op = MOD
| | | | | | | | | | | | | binary_left = VariableFactor
| | | | | | | | | | | | | | variable = param
| | | | | | | | | | | | | binary_right = VariableFactor
| | | | | | | | | | | | | | variable = x
| | | | | | | | | | | | binary_right = NumberFactor
| | | | | | | | | | | | | number_value = 0
| | | | | | | | | | | if_branch = CompoundStatement
| | | | | | | | | | | | compound_statement = StatementList
| | | | | | | | | | | | | ReturnStatement
| | | | | | | | | | | | | | return_expression = BooleanFactor
| | | | | | | | | | | | | | | boolean_value = false
| | | | | | | | | | | if_elsebranch = 
| | | | | | | | | | AssignStatement
| | | | | | | | | | | assign_variable = x
| | | | | | | | | | | assign_expression = BinaryExpression
| | | | | | | | | | | | binary_op = PLUS
| | | | | | | | | | | | binary_left = VariableFactor
| | | | | | | | | | | | | variable = x
| | | | | | | | | | | | binary_right = NumberFactor
| | | | | | | | | | | | | number_value = 1
| | | | | | | ReturnStatement
| | | | | | | | return_expression = BooleanFactor
| | | | | | | | | boolean_value = true
| | statement = CompoundStatement
| | | compound_statement = StatementList
| | | | WriteStatement
| | | | | write_expression = FunctionFactor
| | | | | | function_name = isprime
| | | | | | function_parameters = ExpressionList
| | | | | | | NumberFactor
| | | | | | | | number_value = 1
| | | | WriteStatement
| | | | | write_expression = FunctionFactor
| | | | | | function_name = isprime
| | | | | | function_parameters = ExpressionList
| | | | | | | NumberFactor
| | | | | | | | number_value = 2
| | | | WriteStatement
| | | | | write_expression = FunctionFactor
| | | | | | function_name = isprime
| | | | | | function_parameters = ExpressionList
| | | | | | | NumberFactor
| | | | | | | | number_value = 3
| | | | WriteStatement
| | | | | write_expression = FunctionFactor
| | | | | | function_name = isprime
| | | | | | function_parameters = ExpressionList
| | | | | | | NumberFactor
| | | | | | | | number_value = 4
| | | | WriteStatement
| | | | | write_expression = FunctionFactor
| | | | | | function_name = isprime
| | | | | | function_parameters = ExpressionList
| | | | | | | NumberFactor
| | | | | | | | number_value = 5
