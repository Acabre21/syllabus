scope: <GLOBAL>, level: 0
  pow : (int, int) -> int @0
  digitcount : (int) -> int @0
  ispalindrome : (int) -> bool @0
  scope: pow, level: 1
    base : int @0
    power : int @0
    x : int @0
  scope: digitcount, level: 1
    param : int @0
    c : int @0
  scope: ispalindrome, level: 1
    param : int @0
    first_digit : int @0
    last_digit : int @0
TranslationUnit
| scope = <GLOBAL>
| block = Block
| | vardecls = TypedIdentList
| | funcdecls = FuncDeclList
| | | FuncDecl
| | | | scope = pow
| | | | symbol = <GLOBAL>.pow
| | | | identifier = pow
| | | | formals = TypedIdentList
| | | | | TypedIdent
| | | | | | symbol = pow.base
| | | | | | identifier = base
| | | | | | type = INT
| | | | | TypedIdent
| | | | | | symbol = pow.power
| | | | | | identifier = power
| | | | | | type = INT
| | | | has_return = true
| | | | return_type = INT
| | | | block = Block
| | | | | vardecls = TypedIdentList
| | | | | | TypedIdent
| | | | | | | symbol = pow.x
| | | | | | | identifier = x
| | | | | | | type = INT
| | | | | funcdecls = FuncDeclList
| | | | | statement = CompoundStatement
| | | | | | compound_statement = StatementList
| | | | | | | IfStatement
| | | | | | | | if_condition = BinaryExpression
| | | | | | | | | ershov = 2
| | | | | | | | | datatype = bool
| | | | | | | | | binary_op = LT
| | | | | | | | | binary_left = VariableFactor
| | | | | | | | | | ershov = 1
| | | | | | | | | | datatype = int
| | | | | | | | | | variable_symbol = pow.power
| | | | | | | | | | variable = power
| | | | | | | | | binary_right = NumberFactor
| | | | | | | | | | ershov = 1
| | | | | | | | | | datatype = int
| | | | | | | | | | number_value = 1
| | | | | | | | if_branch = ReturnStatement
| | | | | | | | | function_symbol = <GLOBAL>.pow
| | | | | | | | | return_expression = NumberFactor
| | | | | | | | | | ershov = 1
| | | | | | | | | | datatype = int
| | | | | | | | | | number_value = 1
| | | | | | | | if_elsebranch = 
| | | | | | | AssignStatement
| | | | | | | | assign_symbol = pow.x
| | | | | | | | assign_variable = x
| | | | | | | | assign_expression = NumberFactor
| | | | | | | | | ershov = 1
| | | | | | | | | datatype = int
| | | | | | | | | number_value = 1
| | | | | | | WhileStatement
| | | | | | | | while_condition = BinaryExpression
| | | | | | | | | ershov = 2
| | | | | | | | | datatype = bool
| | | | | | | | | binary_op = GT
| | | | | | | | | binary_left = VariableFactor
| | | | | | | | | | ershov = 1
| | | | | | | | | | datatype = int
| | | | | | | | | | variable_symbol = pow.power
| | | | | | | | | | variable = power
| | | | | | | | | binary_right = NumberFactor
| | | | | | | | | | ershov = 1
| | | | | | | | | | datatype = int
| | | | | | | | | | number_value = 1
| | | | | | | | while_body = CompoundStatement
| | | | | | | | | compound_statement = StatementList
| | | | | | | | | | AssignStatement
| | | | | | | | | | | assign_symbol = pow.x
| | | | | | | | | | | assign_variable = x
| | | | | | | | | | | assign_expression = BinaryExpression
| | | | | | | | | | | | ershov = 2
| | | | | | | | | | | | datatype = int
| | | | | | | | | | | | binary_op = MULT
| | | | | | | | | | | | binary_left = VariableFactor
| | | | | | | | | | | | | ershov = 1
| | | | | | | | | | | | | datatype = int
| | | | | | | | | | | | | variable_symbol = pow.x
| | | | | | | | | | | | | variable = x
| | | | | | | | | | | | binary_right = VariableFactor
| | | | | | | | | | | | | ershov = 1
| | | | | | | | | | | | | datatype = int
| | | | | | | | | | | | | variable_symbol = pow.base
| | | | | | | | | | | | | variable = base
| | | | | | | | | | AssignStatement
| | | | | | | | | | | assign_symbol = pow.power
| | | | | | | | | | | assign_variable = power
| | | | | | | | | | | assign_expression = BinaryExpression
| | | | | | | | | | | | ershov = 2
| | | | | | | | | | | | datatype = int
| | | | | | | | | | | | binary_op = MINUS
| | | | | | | | | | | | binary_left = VariableFactor
| | | | | | | | | | | | | ershov = 1
| | | | | | | | | | | | | datatype = int
| | | | | | | | | | | | | variable_symbol = pow.power
| | | | | | | | | | | | | variable = power
| | | | | | | | | | | | binary_right = NumberFactor
| | | | | | | | | | | | | ershov = 1
| | | | | | | | | | | | | datatype = int
| | | | | | | | | | | | | number_value = 1
| | | | | | | ReturnStatement
| | | | | | | | function_symbol = <GLOBAL>.pow
| | | | | | | | return_expression = VariableFactor
| | | | | | | | | ershov = 1
| | | | | | | | | datatype = int
| | | | | | | | | variable_symbol = pow.x
| | | | | | | | | variable = x
| | | FuncDecl
| | | | scope = digitcount
| | | | symbol = <GLOBAL>.digitcount
| | | | identifier = digitcount
| | | | formals = TypedIdentList
| | | | | TypedIdent
| | | | | | symbol = digitcount.param
| | | | | | identifier = param
| | | | | | type = INT
| | | | has_return = true
| | | | return_type = INT
| | | | block = Block
| | | | | vardecls = TypedIdentList
| | | | | | TypedIdent
| | | | | | | symbol = digitcount.c
| | | | | | | identifier = c
| | | | | | | type = INT
| | | | | funcdecls = FuncDeclList
| | | | | statement = CompoundStatement
| | | | | | compound_statement = StatementList
| | | | | | | IfStatement
| | | | | | | | if_condition = BinaryExpression
| | | | | | | | | ershov = 2
| | | | | | | | | datatype = bool
| | | | | | | | | binary_op = LT
| | | | | | | | | binary_left = VariableFactor
| | | | | | | | | | ershov = 1
| | | | | | | | | | datatype = int
| | | | | | | | | | variable_symbol = digitcount.param
| | | | | | | | | | variable = param
| | | | | | | | | binary_right = NumberFactor
| | | | | | | | | | ershov = 1
| | | | | | | | | | datatype = int
| | | | | | | | | | number_value = 0
| | | | | | | | if_branch = CompoundStatement
| | | | | | | | | compound_statement = StatementList
| | | | | | | | | | ReturnStatement
| | | | | | | | | | | function_symbol = <GLOBAL>.digitcount
| | | | | | | | | | | return_expression = FunctionFactor
| | | | | | | | | | | | ershov = 1
| | | | | | | | | | | | datatype = int
| | | | | | | | | | | | function_symbol = <GLOBAL>.digitcount
| | | | | | | | | | | | function_name = digitcount
| | | | | | | | | | | | function_parameters = ExpressionList
| | | | | | | | | | | | | UnaryExpression
| | | | | | | | | | | | | | ershov = 1
| | | | | | | | | | | | | | datatype = int
| | | | | | | | | | | | | | unary_op = MINUS
| | | | | | | | | | | | | | unary_expression = VariableFactor
| | | | | | | | | | | | | | | ershov = 1
| | | | | | | | | | | | | | | datatype = int
| | | | | | | | | | | | | | | variable_symbol = digitcount.param
| | | | | | | | | | | | | | | variable = param
| | | | | | | | if_elsebranch = IfStatement
| | | | | | | | | if_condition = BinaryExpression
| | | | | | | | | | ershov = 3
| | | | | | | | | | datatype = bool
| | | | | | | | | | binary_op = AND
| | | | | | | | | | binary_left = BinaryExpression
| | | | | | | | | | | ershov = 2
| | | | | | | | | | | datatype = bool
| | | | | | | | | | | binary_op = GTE
| | | | | | | | | | | binary_left = VariableFactor
| | | | | | | | | | | | ershov = 1
| | | | | | | | | | | | datatype = int
| | | | | | | | | | | | variable_symbol = digitcount.param
| | | | | | | | | | | | variable = param
| | | | | | | | | | | binary_right = NumberFactor
| | | | | | | | | | | | ershov = 1
| | | | | | | | | | | | datatype = int
| | | | | | | | | | | | number_value = 0
| | | | | | | | | | binary_right = BinaryExpression
| | | | | | | | | | | ershov = 2
| | | | | | | | | | | datatype = bool
| | | | | | | | | | | binary_op = LT
| | | | | | | | | | | binary_left = VariableFactor
| | | | | | | | | | | | ershov = 1
| | | | | | | | | | | | datatype = int
| | | | | | | | | | | | variable_symbol = digitcount.param
| | | | | | | | | | | | variable = param
| | | | | | | | | | | binary_right = NumberFactor
| | | | | | | | | | | | ershov = 1
| | | | | | | | | | | | datatype = int
| | | | | | | | | | | | number_value = 10
| | | | | | | | | if_branch = CompoundStatement
| | | | | | | | | | compound_statement = StatementList
| | | | | | | | | | | ReturnStatement
| | | | | | | | | | | | function_symbol = <GLOBAL>.digitcount
| | | | | | | | | | | | return_expression = NumberFactor
| | | | | | | | | | | | | ershov = 1
| | | | | | | | | | | | | datatype = int
| | | | | | | | | | | | | number_value = 1
| | | | | | | | | if_elsebranch = CompoundStatement
| | | | | | | | | | compound_statement = StatementList
| | | | | | | | | | | ReturnStatement
| | | | | | | | | | | | function_symbol = <GLOBAL>.digitcount
| | | | | | | | | | | | return_expression = BinaryExpression
| | | | | | | | | | | | | ershov = 2
| | | | | | | | | | | | | datatype = int
| | | | | | | | | | | | | binary_op = PLUS
| | | | | | | | | | | | | binary_left = FunctionFactor
| | | | | | | | | | | | | | ershov = 1
| | | | | | | | | | | | | | datatype = int
| | | | | | | | | | | | | | function_symbol = <GLOBAL>.digitcount
| | | | | | | | | | | | | | function_name = digitcount
| | | | | | | | | | | | | | function_parameters = ExpressionList
| | | | | | | | | | | | | | | BinaryExpression
| | | | | | | | | | | | | | | | ershov = 2
| | | | | | | | | | | | | | | | datatype = int
| | | | | | | | | | | | | | | | binary_op = DIV
| | | | | | | | | | | | | | | | binary_left = VariableFactor
| | | | | | | | | | | | | | | | | ershov = 1
| | | | | | | | | | | | | | | | | datatype = int
| | | | | | | | | | | | | | | | | variable_symbol = digitcount.param
| | | | | | | | | | | | | | | | | variable = param
| | | | | | | | | | | | | | | | binary_right = NumberFactor
| | | | | | | | | | | | | | | | | ershov = 1
| | | | | | | | | | | | | | | | | datatype = int
| | | | | | | | | | | | | | | | | number_value = 10
| | | | | | | | | | | | | binary_right = NumberFactor
| | | | | | | | | | | | | | ershov = 1
| | | | | | | | | | | | | | datatype = int
| | | | | | | | | | | | | | number_value = 1
| | | FuncDecl
| | | | scope = ispalindrome
| | | | symbol = <GLOBAL>.ispalindrome
| | | | identifier = ispalindrome
| | | | formals = TypedIdentList
| | | | | TypedIdent
| | | | | | symbol = ispalindrome.param
| | | | | | identifier = param
| | | | | | type = INT
| | | | has_return = true
| | | | return_type = BOOL
| | | | block = Block
| | | | | vardecls = TypedIdentList
| | | | | | TypedIdent
| | | | | | | symbol = ispalindrome.first_digit
| | | | | | | identifier = first_digit
| | | | | | | type = INT
| | | | | | TypedIdent
| | | | | | | symbol = ispalindrome.last_digit
| | | | | | | identifier = last_digit
| | | | | | | type = INT
| | | | | funcdecls = FuncDeclList
| | | | | statement = CompoundStatement
| | | | | | compound_statement = StatementList
| | | | | | | IfStatement
| | | | | | | | if_condition = BinaryExpression
| | | | | | | | | ershov = 2
| | | | | | | | | datatype = bool
| | | | | | | | | binary_op = EQ
| | | | | | | | | binary_left = FunctionFactor
| | | | | | | | | | ershov = 1
| | | | | | | | | | datatype = int
| | | | | | | | | | function_symbol = <GLOBAL>.digitcount
| | | | | | | | | | function_name = digitcount
| | | | | | | | | | function_parameters = ExpressionList
| | | | | | | | | | | VariableFactor
| | | | | | | | | | | | ershov = 1
| | | | | | | | | | | | datatype = int
| | | | | | | | | | | | variable_symbol = ispalindrome.param
| | | | | | | | | | | | variable = param
| | | | | | | | | binary_right = NumberFactor
| | | | | | | | | | ershov = 1
| | | | | | | | | | datatype = int
| | | | | | | | | | number_value = 1
| | | | | | | | if_branch = ReturnStatement
| | | | | | | | | function_symbol = <GLOBAL>.ispalindrome
| | | | | | | | | return_expression = BooleanFactor
| | | | | | | | | | ershov = 1
| | | | | | | | | | datatype = bool
| | | | | | | | | | boolean_value = true
| | | | | | | | if_elsebranch = IfStatement
| | | | | | | | | if_condition = BinaryExpression
| | | | | | | | | | ershov = 2
| | | | | | | | | | datatype = bool
| | | | | | | | | | binary_op = EQ
| | | | | | | | | | binary_left = FunctionFactor
| | | | | | | | | | | ershov = 1
| | | | | | | | | | | datatype = int
| | | | | | | | | | | function_symbol = <GLOBAL>.digitcount
| | | | | | | | | | | function_name = digitcount
| | | | | | | | | | | function_parameters = ExpressionList
| | | | | | | | | | | | VariableFactor
| | | | | | | | | | | | | ershov = 1
| | | | | | | | | | | | | datatype = int
| | | | | | | | | | | | | variable_symbol = ispalindrome.param
| | | | | | | | | | | | | variable = param
| | | | | | | | | | binary_right = NumberFactor
| | | | | | | | | | | ershov = 1
| | | | | | | | | | | datatype = int
| | | | | | | | | | | number_value = 2
| | | | | | | | | if_branch = ReturnStatement
| | | | | | | | | | function_symbol = <GLOBAL>.ispalindrome
| | | | | | | | | | return_expression = BinaryExpression
| | | | | | | | | | | ershov = 3
| | | | | | | | | | | datatype = bool
| | | | | | | | | | | binary_op = EQ
| | | | | | | | | | | binary_left = BinaryExpression
| | | | | | | | | | | | ershov = 2
| | | | | | | | | | | | datatype = int
| | | | | | | | | | | | binary_op = MOD
| | | | | | | | | | | | binary_left = VariableFactor
| | | | | | | | | | | | | ershov = 1
| | | | | | | | | | | | | datatype = int
| | | | | | | | | | | | | variable_symbol = ispalindrome.param
| | | | | | | | | | | | | variable = param
| | | | | | | | | | | | binary_right = NumberFactor
| | | | | | | | | | | | | ershov = 1
| | | | | | | | | | | | | datatype = int
| | | | | | | | | | | | | number_value = 10
| | | | | | | | | | | binary_right = BinaryExpression
| | | | | | | | | | | | ershov = 2
| | | | | | | | | | | | datatype = int
| | | | | | | | | | | | binary_op = DIV
| | | | | | | | | | | | binary_left = VariableFactor
| | | | | | | | | | | | | ershov = 1
| | | | | | | | | | | | | datatype = int
| | | | | | | | | | | | | variable_symbol = ispalindrome.param
| | | | | | | | | | | | | variable = param
| | | | | | | | | | | | binary_right = NumberFactor
| | | | | | | | | | | | | ershov = 1
| | | | | | | | | | | | | datatype = int
| | | | | | | | | | | | | number_value = 10
| | | | | | | | | if_elsebranch = CompoundStatement
| | | | | | | | | | compound_statement = StatementList
| | | | | | | | | | | AssignStatement
| | | | | | | | | | | | assign_symbol = ispalindrome.first_digit
| | | | | | | | | | | | assign_variable = first_digit
| | | | | | | | | | | | assign_expression = BinaryExpression
| | | | | | | | | | | | | ershov = 2
| | | | | | | | | | | | | datatype = int
| | | | | | | | | | | | | binary_op = DIV
| | | | | | | | | | | | | binary_left = VariableFactor
| | | | | | | | | | | | | | ershov = 1
| | | | | | | | | | | | | | datatype = int
| | | | | | | | | | | | | | variable_symbol = ispalindrome.param
| | | | | | | | | | | | | | variable = param
| | | | | | | | | | | | | binary_right = FunctionFactor
| | | | | | | | | | | | | | ershov = 1
| | | | | | | | | | | | | | datatype = int
| | | | | | | | | | | | | | function_symbol = <GLOBAL>.pow
| | | | | | | | | | | | | | function_name = pow
| | | | | | | | | | | | | | function_parameters = ExpressionList
| | | | | | | | | | | | | | | NumberFactor
| | | | | | | | | | | | | | | | ershov = 1
| | | | | | | | | | | | | | | | datatype = int
| | | | | | | | | | | | | | | | number_value = 10
| | | | | | | | | | | | | | | FunctionFactor
| | | | | | | | | | | | | | | | ershov = 1
| | | | | | | | | | | | | | | | datatype = int
| | | | | | | | | | | | | | | | function_symbol = <GLOBAL>.digitcount
| | | | | | | | | | | | | | | | function_name = digitcount
| | | | | | | | | | | | | | | | function_parameters = ExpressionList
| | | | | | | | | | | | | | | | | VariableFactor
| | | | | | | | | | | | | | | | | | ershov = 1
| | | | | | | | | | | | | | | | | | datatype = int
| | | | | | | | | | | | | | | | | | variable_symbol = ispalindrome.param
| | | | | | | | | | | | | | | | | | variable = param
| | | | | | | | | | | AssignStatement
| | | | | | | | | | | | assign_symbol = ispalindrome.last_digit
| | | | | | | | | | | | assign_variable = last_digit
| | | | | | | | | | | | assign_expression = BinaryExpression
| | | | | | | | | | | | | ershov = 2
| | | | | | | | | | | | | datatype = int
| | | | | | | | | | | | | binary_op = MOD
| | | | | | | | | | | | | binary_left = VariableFactor
| | | | | | | | | | | | | | ershov = 1
| | | | | | | | | | | | | | datatype = int
| | | | | | | | | | | | | | variable_symbol = ispalindrome.param
| | | | | | | | | | | | | | variable = param
| | | | | | | | | | | | | binary_right = NumberFactor
| | | | | | | | | | | | | | ershov = 1
| | | | | | | | | | | | | | datatype = int
| | | | | | | | | | | | | | number_value = 10
| | | | | | | | | | | IfStatement
| | | | | | | | | | | | if_condition = BinaryExpression
| | | | | | | | | | | | | ershov = 2
| | | | | | | | | | | | | datatype = bool
| | | | | | | | | | | | | binary_op = NEQ
| | | | | | | | | | | | | binary_left = VariableFactor
| | | | | | | | | | | | | | ershov = 1
| | | | | | | | | | | | | | datatype = int
| | | | | | | | | | | | | | variable_symbol = ispalindrome.first_digit
| | | | | | | | | | | | | | variable = first_digit
| | | | | | | | | | | | | binary_right = VariableFactor
| | | | | | | | | | | | | | ershov = 1
| | | | | | | | | | | | | | datatype = int
| | | | | | | | | | | | | | variable_symbol = ispalindrome.last_digit
| | | | | | | | | | | | | | variable = last_digit
| | | | | | | | | | | | if_branch = ReturnStatement
| | | | | | | | | | | | | function_symbol = <GLOBAL>.ispalindrome
| | | | | | | | | | | | | return_expression = BooleanFactor
| | | | | | | | | | | | | | ershov = 1
| | | | | | | | | | | | | | datatype = bool
| | | | | | | | | | | | | | boolean_value = false
| | | | | | | | | | | | if_elsebranch = CompoundStatement
| | | | | | | | | | | | | compound_statement = StatementList
| | | | | | | | | | | | | | AssignStatement
| | | | | | | | | | | | | | | assign_symbol = ispalindrome.param
| | | | | | | | | | | | | | | assign_variable = param
| | | | | | | | | | | | | | | assign_expression = BinaryExpression
| | | | | | | | | | | | | | | | ershov = 2
| | | | | | | | | | | | | | | | datatype = int
| | | | | | | | | | | | | | | | binary_op = DIV
| | | | | | | | | | | | | | | | binary_left = BinaryExpression
| | | | | | | | | | | | | | | | | ershov = 2
| | | | | | | | | | | | | | | | | datatype = int
| | | | | | | | | | | | | | | | | binary_op = MINUS
| | | | | | | | | | | | | | | | | binary_left = VariableFactor
| | | | | | | | | | | | | | | | | | ershov = 1
| | | | | | | | | | | | | | | | | | datatype = int
| | | | | | | | | | | | | | | | | | variable_symbol = ispalindrome.param
| | | | | | | | | | | | | | | | | | variable = param
| | | | | | | | | | | | | | | | | binary_right = BinaryExpression
| | | | | | | | | | | | | | | | | | ershov = 2
| | | | | | | | | | | | | | | | | | datatype = int
| | | | | | | | | | | | | | | | | | binary_op = MULT
| | | | | | | | | | | | | | | | | | binary_left = VariableFactor
| | | | | | | | | | | | | | | | | | | ershov = 1
| | | | | | | | | | | | | | | | | | | datatype = int
| | | | | | | | | | | | | | | | | | | variable_symbol = ispalindrome.first_digit
| | | | | | | | | | | | | | | | | | | variable = first_digit
| | | | | | | | | | | | | | | | | | binary_right = FunctionFactor
| | | | | | | | | | | | | | | | | | | ershov = 1
| | | | | | | | | | | | | | | | | | | datatype = int
| | | | | | | | | | | | | | | | | | | function_symbol = <GLOBAL>.pow
| | | | | | | | | | | | | | | | | | | function_name = pow
| | | | | | | | | | | | | | | | | | | function_parameters = ExpressionList
| | | | | | | | | | | | | | | | | | | | NumberFactor
| | | | | | | | | | | | | | | | | | | | | ershov = 1
| | | | | | | | | | | | | | | | | | | | | datatype = int
| | | | | | | | | | | | | | | | | | | | | number_value = 10
| | | | | | | | | | | | | | | | | | | | FunctionFactor
| | | | | | | | | | | | | | | | | | | | | ershov = 1
| | | | | | | | | | | | | | | | | | | | | datatype = int
| | | | | | | | | | | | | | | | | | | | | function_symbol = <GLOBAL>.digitcount
| | | | | | | | | | | | | | | | | | | | | function_name = digitcount
| | | | | | | | | | | | | | | | | | | | | function_parameters = ExpressionList
| | | | | | | | | | | | | | | | | | | | | | VariableFactor
| | | | | | | | | | | | | | | | | | | | | | | ershov = 1
| | | | | | | | | | | | | | | | | | | | | | | datatype = int
| | | | | | | | | | | | | | | | | | | | | | | variable_symbol = ispalindrome.param
| | | | | | | | | | | | | | | | | | | | | | | variable = param
| | | | | | | | | | | | | | | | binary_right = NumberFactor
| | | | | | | | | | | | | | | | | ershov = 1
| | | | | | | | | | | | | | | | | datatype = int
| | | | | | | | | | | | | | | | | number_value = 10
| | | | | | | | | | | | | | ReturnStatement
| | | | | | | | | | | | | | | function_symbol = <GLOBAL>.ispalindrome
| | | | | | | | | | | | | | | return_expression = FunctionFactor
| | | | | | | | | | | | | | | | ershov = 1
| | | | | | | | | | | | | | | | datatype = bool
| | | | | | | | | | | | | | | | function_symbol = <GLOBAL>.ispalindrome
| | | | | | | | | | | | | | | | function_name = ispalindrome
| | | | | | | | | | | | | | | | function_parameters = ExpressionList
| | | | | | | | | | | | | | | | | VariableFactor
| | | | | | | | | | | | | | | | | | ershov = 1
| | | | | | | | | | | | | | | | | | datatype = int
| | | | | | | | | | | | | | | | | | variable_symbol = ispalindrome.param
| | | | | | | | | | | | | | | | | | variable = param
| | statement = CompoundStatement
| | | compound_statement = StatementList
| | | | WriteStatement
| | | | | write_expression = FunctionFactor
| | | | | | ershov = 1
| | | | | | datatype = bool
| | | | | | function_symbol = <GLOBAL>.ispalindrome
| | | | | | function_name = ispalindrome
| | | | | | function_parameters = ExpressionList
| | | | | | | NumberFactor
| | | | | | | | ershov = 1
| | | | | | | | datatype = int
| | | | | | | | number_value = 1
| | | | WriteStatement
| | | | | write_expression = FunctionFactor
| | | | | | ershov = 1
| | | | | | datatype = bool
| | | | | | function_symbol = <GLOBAL>.ispalindrome
| | | | | | function_name = ispalindrome
| | | | | | function_parameters = ExpressionList
| | | | | | | NumberFactor
| | | | | | | | ershov = 1
| | | | | | | | datatype = int
| | | | | | | | number_value = 12
| | | | WriteStatement
| | | | | write_expression = FunctionFactor
| | | | | | ershov = 1
| | | | | | datatype = bool
| | | | | | function_symbol = <GLOBAL>.ispalindrome
| | | | | | function_name = ispalindrome
| | | | | | function_parameters = ExpressionList
| | | | | | | NumberFactor
| | | | | | | | ershov = 1
| | | | | | | | datatype = int
| | | | | | | | number_value = 123
| | | | WriteStatement
| | | | | write_expression = FunctionFactor
| | | | | | ershov = 1
| | | | | | datatype = bool
| | | | | | function_symbol = <GLOBAL>.ispalindrome
| | | | | | function_name = ispalindrome
| | | | | | function_parameters = ExpressionList
| | | | | | | NumberFactor
| | | | | | | | ershov = 1
| | | | | | | | datatype = int
| | | | | | | | number_value = 11
| | | | WriteStatement
| | | | | write_expression = FunctionFactor
| | | | | | ershov = 1
| | | | | | datatype = bool
| | | | | | function_symbol = <GLOBAL>.ispalindrome
| | | | | | function_name = ispalindrome
| | | | | | function_parameters = ExpressionList
| | | | | | | NumberFactor
| | | | | | | | ershov = 1
| | | | | | | | datatype = int
| | | | | | | | number_value = 121
| | | | WriteStatement
| | | | | write_expression = FunctionFactor
| | | | | | ershov = 1
| | | | | | datatype = bool
| | | | | | function_symbol = <GLOBAL>.ispalindrome
| | | | | | function_name = ispalindrome
| | | | | | function_parameters = ExpressionList
| | | | | | | NumberFactor
| | | | | | | | ershov = 1
| | | | | | | | datatype = int
| | | | | | | | number_value = 123321
| | | | WriteStatement
| | | | | write_expression = FunctionFactor
| | | | | | ershov = 1
| | | | | | datatype = bool
| | | | | | function_symbol = <GLOBAL>.ispalindrome
| | | | | | function_name = ispalindrome
| | | | | | function_parameters = ExpressionList
| | | | | | | NumberFactor
| | | | | | | | ershov = 1
| | | | | | | | datatype = int
| | | | | | | | number_value = 123123
| | | | WriteStatement
| | | | | write_expression = FunctionFactor
| | | | | | ershov = 1
| | | | | | datatype = bool
| | | | | | function_symbol = <GLOBAL>.ispalindrome
| | | | | | function_name = ispalindrome
| | | | | | function_parameters = ExpressionList
| | | | | | | NumberFactor
| | | | | | | | ershov = 1
| | | | | | | | datatype = int
| | | | | | | | number_value = 12323
| | | | WriteStatement
| | | | | write_expression = FunctionFactor
| | | | | | ershov = 1
| | | | | | datatype = bool
| | | | | | function_symbol = <GLOBAL>.ispalindrome
| | | | | | function_name = ispalindrome
| | | | | | function_parameters = ExpressionList
| | | | | | | NumberFactor
| | | | | | | | ershov = 1
| | | | | | | | datatype = int
| | | | | | | | number_value = 1111111
