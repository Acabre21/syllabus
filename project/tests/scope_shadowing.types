scope: <GLOBAL>, level: 0
  x : int @0
  y : bool @0
  foo : (bool, int) -> bool @0
  bar : () -> bool @0
  thud : () -> bool @0
  scope: foo, level: 1
    x : bool @0
    y : int @0
  scope: bar, level: 1
    x : bool @0
    y : int @0
  scope: thud, level: 1
TranslationUnit
| scope = <GLOBAL>
| block = Block
| | vardecls = TypedIdentList
| | | TypedIdent
| | | | symbol = <GLOBAL>.x
| | | | identifier = x
| | | | type = INT
| | | TypedIdent
| | | | symbol = <GLOBAL>.y
| | | | identifier = y
| | | | type = BOOL
| | funcdecls = FuncDeclList
| | | FuncDecl
| | | | scope = foo
| | | | symbol = <GLOBAL>.foo
| | | | identifier = foo
| | | | formals = TypedIdentList
| | | | | TypedIdent
| | | | | | symbol = foo.x
| | | | | | identifier = x
| | | | | | type = BOOL
| | | | | TypedIdent
| | | | | | symbol = foo.y
| | | | | | identifier = y
| | | | | | type = INT
| | | | has_return = true
| | | | return_type = BOOL
| | | | block = Block
| | | | | vardecls = TypedIdentList
| | | | | funcdecls = FuncDeclList
| | | | | statement = CompoundStatement
| | | | | | compound_statement = StatementList
| | | | | | | WriteStatement
| | | | | | | | write_expression = NumberFactor
| | | | | | | | | datatype = int
| | | | | | | | | ershov = 1
| | | | | | | | | number_value = 0
| | | | | | | IfStatement
| | | | | | | | if_condition = VariableFactor
| | | | | | | | | datatype = bool
| | | | | | | | | ershov = 1
| | | | | | | | | variable_symbol = foo.x
| | | | | | | | | variable = x
| | | | | | | | if_branch = WriteStatement
| | | | | | | | | write_expression = NumberFactor
| | | | | | | | | | datatype = int
| | | | | | | | | | ershov = 1
| | | | | | | | | | number_value = 1
| | | | | | | | if_elsebranch = WriteStatement
| | | | | | | | | write_expression = NumberFactor
| | | | | | | | | | datatype = int
| | | | | | | | | | ershov = 1
| | | | | | | | | | number_value = 2
| | | | | | | IfStatement
| | | | | | | | if_condition = UnaryExpression
| | | | | | | | | datatype = bool
| | | | | | | | | ershov = 1
| | | | | | | | | unary_op = NOT
| | | | | | | | | unary_expression = VariableFactor
| | | | | | | | | | datatype = bool
| | | | | | | | | | ershov = 1
| | | | | | | | | | variable_symbol = foo.x
| | | | | | | | | | variable = x
| | | | | | | | if_branch = WriteStatement
| | | | | | | | | write_expression = NumberFactor
| | | | | | | | | | datatype = int
| | | | | | | | | | ershov = 1
| | | | | | | | | | number_value = 3
| | | | | | | | if_elsebranch = WriteStatement
| | | | | | | | | write_expression = NumberFactor
| | | | | | | | | | datatype = int
| | | | | | | | | | ershov = 1
| | | | | | | | | | number_value = 4
| | | | | | | WriteStatement
| | | | | | | | write_expression = VariableFactor
| | | | | | | | | datatype = bool
| | | | | | | | | ershov = 1
| | | | | | | | | variable_symbol = foo.x
| | | | | | | | | variable = x
| | | | | | | WriteStatement
| | | | | | | | write_expression = VariableFactor
| | | | | | | | | datatype = int
| | | | | | | | | ershov = 1
| | | | | | | | | variable_symbol = foo.y
| | | | | | | | | variable = y
| | | | | | | ReturnStatement
| | | | | | | | function_symbol = <GLOBAL>.foo
| | | | | | | | return_expression = BooleanFactor
| | | | | | | | | datatype = bool
| | | | | | | | | ershov = 1
| | | | | | | | | boolean_value = true
| | | FuncDecl
| | | | scope = bar
| | | | symbol = <GLOBAL>.bar
| | | | identifier = bar
| | | | formals = TypedIdentList
| | | | has_return = true
| | | | return_type = BOOL
| | | | block = Block
| | | | | vardecls = TypedIdentList
| | | | | | TypedIdent
| | | | | | | symbol = bar.x
| | | | | | | identifier = x
| | | | | | | type = BOOL
| | | | | | TypedIdent
| | | | | | | symbol = bar.y
| | | | | | | identifier = y
| | | | | | | type = INT
| | | | | funcdecls = FuncDeclList
| | | | | statement = CompoundStatement
| | | | | | compound_statement = StatementList
| | | | | | | WriteStatement
| | | | | | | | write_expression = NumberFactor
| | | | | | | | | datatype = int
| | | | | | | | | ershov = 1
| | | | | | | | | number_value = 5
| | | | | | | AssignStatement
| | | | | | | | assign_symbol = bar.x
| | | | | | | | assign_variable = x
| | | | | | | | assign_expression = BooleanFactor
| | | | | | | | | datatype = bool
| | | | | | | | | ershov = 1
| | | | | | | | | boolean_value = true
| | | | | | | AssignStatement
| | | | | | | | assign_symbol = bar.y
| | | | | | | | assign_variable = y
| | | | | | | | assign_expression = NumberFactor
| | | | | | | | | datatype = int
| | | | | | | | | ershov = 1
| | | | | | | | | number_value = 6
| | | | | | | IfStatement
| | | | | | | | if_condition = VariableFactor
| | | | | | | | | datatype = bool
| | | | | | | | | ershov = 1
| | | | | | | | | variable_symbol = bar.x
| | | | | | | | | variable = x
| | | | | | | | if_branch = WriteStatement
| | | | | | | | | write_expression = NumberFactor
| | | | | | | | | | datatype = int
| | | | | | | | | | ershov = 1
| | | | | | | | | | number_value = 7
| | | | | | | | if_elsebranch = WriteStatement
| | | | | | | | | write_expression = NumberFactor
| | | | | | | | | | datatype = int
| | | | | | | | | | ershov = 1
| | | | | | | | | | number_value = 8
| | | | | | | IfStatement
| | | | | | | | if_condition = UnaryExpression
| | | | | | | | | datatype = bool
| | | | | | | | | ershov = 1
| | | | | | | | | unary_op = NOT
| | | | | | | | | unary_expression = VariableFactor
| | | | | | | | | | datatype = bool
| | | | | | | | | | ershov = 1
| | | | | | | | | | variable_symbol = bar.x
| | | | | | | | | | variable = x
| | | | | | | | if_branch = WriteStatement
| | | | | | | | | write_expression = NumberFactor
| | | | | | | | | | datatype = int
| | | | | | | | | | ershov = 1
| | | | | | | | | | number_value = 9
| | | | | | | | if_elsebranch = WriteStatement
| | | | | | | | | write_expression = NumberFactor
| | | | | | | | | | datatype = int
| | | | | | | | | | ershov = 1
| | | | | | | | | | number_value = 10
| | | | | | | WriteStatement
| | | | | | | | write_expression = VariableFactor
| | | | | | | | | datatype = bool
| | | | | | | | | ershov = 1
| | | | | | | | | variable_symbol = bar.x
| | | | | | | | | variable = x
| | | | | | | WriteStatement
| | | | | | | | write_expression = VariableFactor
| | | | | | | | | datatype = int
| | | | | | | | | ershov = 1
| | | | | | | | | variable_symbol = bar.y
| | | | | | | | | variable = y
| | | | | | | ReturnStatement
| | | | | | | | function_symbol = <GLOBAL>.bar
| | | | | | | | return_expression = BooleanFactor
| | | | | | | | | datatype = bool
| | | | | | | | | ershov = 1
| | | | | | | | | boolean_value = true
| | | FuncDecl
| | | | scope = thud
| | | | symbol = <GLOBAL>.thud
| | | | identifier = thud
| | | | formals = TypedIdentList
| | | | has_return = true
| | | | return_type = BOOL
| | | | block = Block
| | | | | vardecls = TypedIdentList
| | | | | funcdecls = FuncDeclList
| | | | | statement = CompoundStatement
| | | | | | compound_statement = StatementList
| | | | | | | WriteStatement
| | | | | | | | write_expression = VariableFactor
| | | | | | | | | datatype = int
| | | | | | | | | ershov = 1
| | | | | | | | | variable_symbol = <GLOBAL>.x
| | | | | | | | | variable = x
| | | | | | | WriteStatement
| | | | | | | | write_expression = VariableFactor
| | | | | | | | | datatype = bool
| | | | | | | | | ershov = 1
| | | | | | | | | variable_symbol = <GLOBAL>.y
| | | | | | | | | variable = y
| | statement = CompoundStatement
| | | compound_statement = StatementList
| | | | AssignStatement
| | | | | assign_symbol = <GLOBAL>.x
| | | | | assign_variable = x
| | | | | assign_expression = NumberFactor
| | | | | | datatype = int
| | | | | | ershov = 1
| | | | | | number_value = 11
| | | | AssignStatement
| | | | | assign_symbol = <GLOBAL>.y
| | | | | assign_variable = y
| | | | | assign_expression = BooleanFactor
| | | | | | datatype = bool
| | | | | | ershov = 1
| | | | | | boolean_value = false
| | | | WriteStatement
| | | | | write_expression = VariableFactor
| | | | | | datatype = int
| | | | | | ershov = 1
| | | | | | variable_symbol = <GLOBAL>.x
| | | | | | variable = x
| | | | WriteStatement
| | | | | write_expression = VariableFactor
| | | | | | datatype = bool
| | | | | | ershov = 1
| | | | | | variable_symbol = <GLOBAL>.y
| | | | | | variable = y
| | | | CallStatement
| | | | | call_symbol = <GLOBAL>.thud
| | | | | call_function = thud
| | | | | call_parameters = ExpressionList
| | | | CallStatement
| | | | | call_symbol = <GLOBAL>.foo
| | | | | call_function = foo
| | | | | call_parameters = ExpressionList
| | | | | | BooleanFactor
| | | | | | | datatype = bool
| | | | | | | ershov = 1
| | | | | | | boolean_value = false
| | | | | | NumberFactor
| | | | | | | datatype = int
| | | | | | | ershov = 1
| | | | | | | number_value = 12
| | | | CallStatement
| | | | | call_symbol = <GLOBAL>.thud
| | | | | call_function = thud
| | | | | call_parameters = ExpressionList
| | | | CallStatement
| | | | | call_symbol = <GLOBAL>.foo
| | | | | call_function = foo
| | | | | call_parameters = ExpressionList
| | | | | | BooleanFactor
| | | | | | | datatype = bool
| | | | | | | ershov = 1
| | | | | | | boolean_value = true
| | | | | | NumberFactor
| | | | | | | datatype = int
| | | | | | | ershov = 1
| | | | | | | number_value = 13
| | | | CallStatement
| | | | | call_symbol = <GLOBAL>.thud
| | | | | call_function = thud
| | | | | call_parameters = ExpressionList
| | | | CallStatement
| | | | | call_symbol = <GLOBAL>.bar
| | | | | call_function = bar
| | | | | call_parameters = ExpressionList
| | | | CallStatement
| | | | | call_symbol = <GLOBAL>.thud
| | | | | call_function = thud
| | | | | call_parameters = ExpressionList
