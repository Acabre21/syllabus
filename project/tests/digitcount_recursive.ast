TranslationUnit
| block = Block
| | vardecls = TypedIdentList
| | | TypedIdent
| | | | identifier = x
| | | | type = INT
| | funcdecls = FuncDeclList
| | | FuncDecl
| | | | identifier = digitcount
| | | | formals = TypedIdentList
| | | | | TypedIdent
| | | | | | identifier = param
| | | | | | type = INT
| | | | has_return = true
| | | | return_type = INT
| | | | block = Block
| | | | | vardecls = TypedIdentList
| | | | | funcdecls = FuncDeclList
| | | | | statement = CompoundStatement
| | | | | | compound_statement = StatementList
| | | | | | | IfStatement
| | | | | | | | if_condition = BinaryExpression
| | | | | | | | | binary_op = LT
| | | | | | | | | binary_left = VariableFactor
| | | | | | | | | | variable = param
| | | | | | | | | binary_right = NumberFactor
| | | | | | | | | | number_value = 0
| | | | | | | | if_branch = ReturnStatement
| | | | | | | | | return_expression = FunctionFactor
| | | | | | | | | | function_name = digitcount
| | | | | | | | | | function_parameters = ExpressionList
| | | | | | | | | | | UnaryExpression
| | | | | | | | | | | | unary_op = MINUS
| | | | | | | | | | | | unary_expression = VariableFactor
| | | | | | | | | | | | | variable = param
| | | | | | | | if_elsebranch = IfStatement
| | | | | | | | | if_condition = BinaryExpression
| | | | | | | | | | binary_op = AND
| | | | | | | | | | binary_left = BinaryExpression
| | | | | | | | | | | binary_op = GTE
| | | | | | | | | | | binary_left = VariableFactor
| | | | | | | | | | | | variable = param
| | | | | | | | | | | binary_right = NumberFactor
| | | | | | | | | | | | number_value = 0
| | | | | | | | | | binary_right = BinaryExpression
| | | | | | | | | | | binary_op = LT
| | | | | | | | | | | binary_left = VariableFactor
| | | | | | | | | | | | variable = param
| | | | | | | | | | | binary_right = NumberFactor
| | | | | | | | | | | | number_value = 10
| | | | | | | | | if_branch = ReturnStatement
| | | | | | | | | | return_expression = NumberFactor
| | | | | | | | | | | number_value = 1
| | | | | | | | | if_elsebranch = ReturnStatement
| | | | | | | | | | return_expression = BinaryExpression
| | | | | | | | | | | binary_op = PLUS
| | | | | | | | | | | binary_left = FunctionFactor
| | | | | | | | | | | | function_name = digitcount
| | | | | | | | | | | | function_parameters = ExpressionList
| | | | | | | | | | | | | BinaryExpression
| | | | | | | | | | | | | | binary_op = DIV
| | | | | | | | | | | | | | binary_left = VariableFactor
| | | | | | | | | | | | | | | variable = param
| | | | | | | | | | | | | | binary_right = NumberFactor
| | | | | | | | | | | | | | | number_value = 10
| | | | | | | | | | | binary_right = NumberFactor
| | | | | | | | | | | | number_value = 1
| | statement = CompoundStatement
| | | compound_statement = StatementList
| | | | WriteStatement
| | | | | write_expression = FunctionFactor
| | | | | | function_name = digitcount
| | | | | | function_parameters = ExpressionList
| | | | | | | NumberFactor
| | | | | | | | number_value = 123456789
